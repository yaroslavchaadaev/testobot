package bot

import (
	"context"
	"github.com/sirupsen/logrus"
	"log"
	"testobot/internal/config"
	//"testobot/internal/logger"
	"github.com/mymmrac/telego"
)

// App –¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –±–æ—Ç, –ª–æ–≥–≥–µ—Ä –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
type App struct {
	Bot    *telego.Bot
	Logger *logrus.Logger
	Ctx    context.Context
}

// NewApp —Å–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä App
func NewApp(cfg *config.Config, log *logrus.Logger) (*App, error) {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º telego.Bot
	b, err := telego.NewBot(cfg.BotToken, telego.WithDefaultDebugLogger())
	if err != nil {
		return nil, err
	}

	return &App{
		Bot:    b,
		Logger: log,
		Ctx:    context.Background(),
	}, nil
}

// StartPolling –∑–∞–ø—É—Å–∫–∞–µ—Ç Long Polling –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã
func (a *App) StartPolling(handler func(*telego.Update)) error {
	updates, err := a.Bot.UpdatesViaLongPolling(context.Background(), &telego.GetUpdatesParams{})
	if err != nil {
		log.Fatalf("Error getting updates: %v", err)
	}

	go func() {
		for upd := range updates {
			handler(&upd)
		}
	}()
	a.Logger.Info("üü¢ Bot started polling")
	// –ë–ª–æ–∫–∏—Ä—É–µ–º main, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
	select {}
}
